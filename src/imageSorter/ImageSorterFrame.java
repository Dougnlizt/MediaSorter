/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageSorter;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import static javax.swing.KeyStroke.getKeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author dougthompson
 */
public class ImageSorterFrame extends javax.swing.JFrame {

    /**
     * Creates new form ImageSorterFrame
     */
    public ImageSorterFrame() {
        initComponents();
        initMyComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jButtonBrowseMoveTo = new javax.swing.JButton();
        jButtonBrowseSource = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxAutoCreateDirs = new javax.swing.JCheckBox();
        jComboBoxSource = new javax.swing.JComboBox<>();
        jButtonBrowseDeleteTo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxMoveToDestination = new javax.swing.JComboBox<>();
        jComboBoxDeleteToDestination = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelNext = new javax.swing.JLabel();
        jLabelPrevious = new javax.swing.JLabel();
        jSliderBrowsePictures = new javax.swing.JSlider();
        imageLabel = new imageSorter.ImageLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextFieldFilename = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabelMonth = new javax.swing.JLabel();
        jLabelFilenameExtension = new javax.swing.JLabel();
        jLabelYear = new javax.swing.JLabel();
        jLabelXofY = new javax.swing.JLabel();
        jButtonMove = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldDirName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabelDestination = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemUndo = new javax.swing.JMenuItem();
        jMenuItemRenameFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSplitPane1MouseClicked(evt);
            }
        });

        jButtonBrowseMoveTo.setText("...");
        jButtonBrowseMoveTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseMoveToActionPerformed(evt);
            }
        });

        jButtonBrowseSource.setText("...");
        jButtonBrowseSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseSourceActionPerformed(evt);
            }
        });

        jLabel2.setText("'Move To' Directory:");

        jCheckBoxAutoCreateDirs.setText("Auto create and organize by year\\month");
        jCheckBoxAutoCreateDirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAutoCreateDirsActionPerformed(evt);
            }
        });

        jComboBoxSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "\\Volumes\\External Hard Drive\\Brandon\\MyPictures\\", "Item 2", "Item 3", "Item 4" }));
            jComboBoxSource.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboBoxSourceActionPerformed(evt);
                }
            });

            jButtonBrowseDeleteTo.setText("...");
            jButtonBrowseDeleteTo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonBrowseDeleteToActionPerformed(evt);
                }
            });

            jLabel1.setText("Source Directory:");

            jComboBoxMoveToDestination.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "\\Volumes\\External Hard Drive\\Pictures\\Brandon\\Sorted\\", "Item 2", "Item 3", "Item 4" }));
                jComboBoxMoveToDestination.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jComboBoxMoveToDestinationActionPerformed(evt);
                    }
                });

                jComboBoxDeleteToDestination.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "\\Volumes\\External Hard Drive\\Brandon\\Deleted\\", "Item 2", "Item 3", "Item 4" }));
                    jComboBoxDeleteToDestination.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jComboBoxDeleteToDestinationActionPerformed(evt);
                        }
                    });

                    jLabel3.setText("'Delete' Directory:");

                    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                    jPanel2.setLayout(jPanel2Layout);
                    jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGap(13, 13, 13)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBoxDeleteToDestination, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonBrowseDeleteTo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGap(17, 17, 17)
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBoxSource, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonBrowseSource, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(jCheckBoxAutoCreateDirs)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jComboBoxMoveToDestination, 0, 640, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButtonBrowseMoveTo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addContainerGap())
                    );
                    jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jComboBoxSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonBrowseSource))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jComboBoxMoveToDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonBrowseMoveTo))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCheckBoxAutoCreateDirs)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jComboBoxDeleteToDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonBrowseDeleteTo))
                            .addContainerGap())
                    );

                    jSplitPane1.setLeftComponent(jPanel2);

                    jLabelNext.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
                    jLabelNext.setText(">");
                    jLabelNext.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            jLabelNextMouseClicked(evt);
                        }
                    });

                    jLabelPrevious.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
                    jLabelPrevious.setText("<");
                    jLabelPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            jLabelPreviousMouseClicked(evt);
                        }
                    });

                    jSliderBrowsePictures.setToolTipText("");
                    jSliderBrowsePictures.setValue(0);

                    javax.swing.GroupLayout imageLabelLayout = new javax.swing.GroupLayout(imageLabel);
                    imageLabel.setLayout(imageLabelLayout);
                    imageLabelLayout.setHorizontalGroup(
                        imageLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                    );
                    imageLabelLayout.setVerticalGroup(
                        imageLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
                    );

                    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                    jPanel1.setLayout(jPanel1Layout);
                    jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jLabelPrevious)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jSliderBrowsePictures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelNext)
                            .addGap(18, 18, 18))
                        .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    );
                    jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jSliderBrowsePictures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelNext)
                                .addComponent(jLabelPrevious))
                            .addContainerGap())
                    );

                    jTextFieldFilename.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                    jTextFieldFilename.setText("DSC00123");
                    jTextFieldFilename.addFocusListener(new java.awt.event.FocusAdapter() {
                        public void focusGained(java.awt.event.FocusEvent evt) {
                            jTextFieldFilenameFocusGained(evt);
                        }
                        public void focusLost(java.awt.event.FocusEvent evt) {
                            jTextFieldFilenameFocusLost(evt);
                        }
                    });
                    jTextFieldFilename.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            jTextFieldFilenameKeyTyped(evt);
                        }
                        public void keyReleased(java.awt.event.KeyEvent evt) {
                            jTextFieldFilenameKeyReleased(evt);
                        }
                    });

                    jLabel10.setText("Filename:");

                    jLabelMonth.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
                    jLabelMonth.setText("November");

                    jLabelFilenameExtension.setText(".jpg");

                    jLabelYear.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
                    jLabelYear.setText("2016");

                    jLabelXofY.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
                    jLabelXofY.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    jLabelXofY.setText("Image 3 of 40");

                    jButtonMove.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
                    jButtonMove.setForeground(new java.awt.Color(0, 102, 0));
                    jButtonMove.setText("<html><u>M</u>ove</html>");
                    jButtonMove.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButtonMoveActionPerformed(evt);
                        }
                    });

                    jButtonDelete.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
                    jButtonDelete.setForeground(new java.awt.Color(255, 0, 51));
                    jButtonDelete.setText("Delete");
                    jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButtonDeleteActionPerformed(evt);
                        }
                    });

                    jLabel4.setText("Dir Name:");

                    jTextFieldDirName.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            jTextFieldDirNameKeyTyped(evt);
                        }
                        public void keyReleased(java.awt.event.KeyEvent evt) {
                            jTextFieldDirNameKeyReleased(evt);
                        }
                    });

                    jLabel5.setText("Destination:");

                    jLabelDestination.setText("jLabel6");

                    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                    jPanel4.setLayout(jPanel4Layout);
                    jPanel4Layout.setHorizontalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGap(254, 254, 254)
                                    .addComponent(jLabelXofY, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                    .addGap(20, 20, 20)
                                    .addComponent(jButtonMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButtonDelete))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabelDestination, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextFieldDirName)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel10)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextFieldFilename)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabelFilenameExtension)))
                                    .addGap(36, 36, 36)
                                    .addComponent(jLabelYear)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabelMonth)))
                            .addContainerGap())
                    );
                    jPanel4Layout.setVerticalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jButtonMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelXofY)
                                .addComponent(jButtonDelete))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel10)
                                .addComponent(jTextFieldFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelFilenameExtension)
                                .addComponent(jLabelYear)
                                .addComponent(jLabelMonth)
                                .addComponent(jLabel4)
                                .addComponent(jTextFieldDirName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabelDestination))
                            .addContainerGap())
                    );

                    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                    jPanel3.setLayout(jPanel3Layout);
                    jPanel3Layout.setHorizontalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addContainerGap())
                    );
                    jPanel3Layout.setVerticalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                    );

                    jSplitPane1.setRightComponent(jPanel3);

                    jMenu1.setText("File");

                    jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
                    jMenuItemExit.setText("Exit");
                    jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemExitActionPerformed(evt);
                        }
                    });
                    jMenu1.add(jMenuItemExit);

                    jMenuBar1.add(jMenu1);

                    jMenu2.setText("Edit");

                    jMenuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
                    jMenuItemUndo.setText("Undo");
                    jMenuItemUndo.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemUndoActionPerformed(evt);
                        }
                    });
                    jMenu2.add(jMenuItemUndo);

                    jMenuItemRenameFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
                    jMenuItemRenameFile.setText("Rename File");
                    jMenuItemRenameFile.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemRenameFileActionPerformed(evt);
                        }
                    });
                    jMenu2.add(jMenuItemRenameFile);

                    jMenuBar1.add(jMenu2);

                    setJMenuBar(jMenuBar1);

                    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                    getContentPane().setLayout(layout);
                    layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSplitPane1)
                    );
                    layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSplitPane1)
                    );

                    pack();
                }// </editor-fold>//GEN-END:initComponents

    private void jButtonBrowseSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseSourceActionPerformed
        selectSource();
    }//GEN-LAST:event_jButtonBrowseSourceActionPerformed

    private void jButtonBrowseMoveToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseMoveToActionPerformed
        selectMoveTo();
    }//GEN-LAST:event_jButtonBrowseMoveToActionPerformed

    private void jButtonBrowseDeleteToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseDeleteToActionPerformed
        selectDeleteTo();
    }//GEN-LAST:event_jButtonBrowseDeleteToActionPerformed

    private void jComboBoxSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSourceActionPerformed
        if (!initializing) {
            savePaths(selectSourceList, sourceFileName, jComboBoxSource);
            getSourceFiles();
        }

    }//GEN-LAST:event_jComboBoxSourceActionPerformed

    private void jComboBoxMoveToDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMoveToDestinationActionPerformed
        if (!initializing) savePaths(moveToList, moveToFileName, jComboBoxMoveToDestination);
    }//GEN-LAST:event_jComboBoxMoveToDestinationActionPerformed

    private void jComboBoxDeleteToDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDeleteToDestinationActionPerformed
        if (!initializing) savePaths(deleteToList, deleteToFileName, jComboBoxDeleteToDestination);
    }//GEN-LAST:event_jComboBoxDeleteToDestinationActionPerformed

    private void jCheckBoxAutoCreateDirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAutoCreateDirsActionPerformed
        updateDestinationLabel();
        saveSettings();
    }//GEN-LAST:event_jCheckBoxAutoCreateDirsActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        moveImage(getDestination((String) jComboBoxDeleteToDestination.getSelectedItem(), FileMoveType.DELETE), FileMoveType.DELETE);
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveActionPerformed
        moveImage(getDestination((String) jComboBoxMoveToDestination.getSelectedItem(), FileMoveType.MOVE), FileMoveType.MOVE);
    }//GEN-LAST:event_jButtonMoveActionPerformed

    private void jLabelPreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPreviousMouseClicked
        getPreviousImage();
    }//GEN-LAST:event_jLabelPreviousMouseClicked

    private void jLabelNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNextMouseClicked
        getNextImage();
    }//GEN-LAST:event_jLabelNextMouseClicked

    private void jMenuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUndoActionPerformed
        undoLastAction();
    }//GEN-LAST:event_jMenuItemUndoActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemRenameFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRenameFileActionPerformed
        selectFileNameField();
    }//GEN-LAST:event_jMenuItemRenameFileActionPerformed

    private void jTextFieldFilenameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldFilenameFocusGained
        toggleActions(false);
    }//GEN-LAST:event_jTextFieldFilenameFocusGained

    private void jTextFieldFilenameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldFilenameFocusLost
        toggleActions(true);
    }//GEN-LAST:event_jTextFieldFilenameFocusLost

    private void jTextFieldDirNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDirNameKeyTyped
        updateDestinationLabel();
        saveSettings();
    }//GEN-LAST:event_jTextFieldDirNameKeyTyped

    private void jTextFieldFilenameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFilenameKeyTyped
        updateDestinationLabel();
    }//GEN-LAST:event_jTextFieldFilenameKeyTyped

    private void jTextFieldDirNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDirNameKeyReleased
        updateDestinationLabel();
        saveSettings();
    }//GEN-LAST:event_jTextFieldDirNameKeyReleased

    private void jTextFieldFilenameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFilenameKeyReleased
        updateDestinationLabel();
    }//GEN-LAST:event_jTextFieldFilenameKeyReleased

    private void jSplitPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSplitPane1MouseClicked
        saveSettings();
    }//GEN-LAST:event_jSplitPane1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageSorterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageSorterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageSorterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageSorterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                initializing = true;
                new ImageSorterFrame().setVisible(true);
                initializing = false;
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private imageSorter.ImageLabel imageLabel;
    private javax.swing.JButton jButtonBrowseDeleteTo;
    private javax.swing.JButton jButtonBrowseMoveTo;
    private javax.swing.JButton jButtonBrowseSource;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonMove;
    private javax.swing.JCheckBox jCheckBoxAutoCreateDirs;
    private javax.swing.JComboBox<String> jComboBoxDeleteToDestination;
    private javax.swing.JComboBox<String> jComboBoxMoveToDestination;
    private javax.swing.JComboBox<String> jComboBoxSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelDestination;
    private javax.swing.JLabel jLabelFilenameExtension;
    private javax.swing.JLabel jLabelMonth;
    private javax.swing.JLabel jLabelNext;
    private javax.swing.JLabel jLabelPrevious;
    private javax.swing.JLabel jLabelXofY;
    private javax.swing.JLabel jLabelYear;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemRenameFile;
    private javax.swing.JMenuItem jMenuItemUndo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSlider jSliderBrowsePictures;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextFieldDirName;
    private javax.swing.JTextField jTextFieldFilename;
    // End of variables declaration//GEN-END:variables

    private final String homeDir = System.getProperty("user.home");
    private List<Path> selectSourceList = new ArrayList<>(); 
    private final String sourceFileName = "imageSorterSourcePaths.txt";
    private List<Path> moveToList = new ArrayList<>(); 
    private final String moveToFileName = "imageSorterMoveToPaths.txt";
    private List<Path> deleteToList = new ArrayList<>(); 
    private final String deleteToFileName = "imageSorterDeleteToPaths.txt";
    private final String toolSettingsFileName = "imageSorterSettings.txt";
    private final static String CREATE_DATE_DIR = "Create Year and Month Directory";
    private final static String SUB_DIR_TEXT = "Sub directory text to use with date directory";
    private final static String HIDE_TOP_PART = "Collapse the top componnet";
    private static boolean initializing = false;
    private ArrayList<Path> filesList;
    private int fileIndex;
    private Color defaultFG_Color;
    private static final String NEW_LINE = System.lineSeparator();
    private Path currentImageFilePath = null;
    private MouseListener imageMouseListener = null;
    private ImageSorterFrame thisObject = null;
    private String imageExtensions = "jpgjpeggifpng";
    private String videoExtensions = "mp4mov";
    
    private enum FileMoveType {
        MOVE("Move", "Moving"),
        DELETE("Delete", "Deleting");
        
        private String description;
        private String actionDescription;

        private FileMoveType(String description, String actionDescription) {
            this.description = description;
            this.actionDescription = actionDescription;
        }
        
        
    }
    //File - Exit
    //Action - Undo
    //Version 0.2 Feb 3rd 2017: Fixed an error of 'null' with the destination path that can occur
    //                          Allow the custom dir to be used when not creating year/month in path
    //                          Check for the destination file.  Prompt to continue if it exists.
    //Version 0.3 Feb xx 2017: Change the splash screen...
    //Version 1.0 Feb 21 2017: Include mp4 and mov files.  Allow images and videos to be opened in the 
    //                         OS native tool for viewing/playing
    
    private void initMyComponents() {
        thisObject = this;
        imageMouseListener = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    Desktop.getDesktop().open(currentImageFilePath.toFile());
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(thisObject, "Unable to open file\n\n\t" + currentImageFilePath.getFileName().toString(), "Can't Open File", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {
                imageLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {}
        };
        
        imageLabel.addMouseListener(imageMouseListener);
        
        defaultFG_Color = jLabelDestination.getForeground();
        jCheckBoxAutoCreateDirs.setSelected(true);
        setTitle("Image Sorter Version 1.0");

        int selectedIndex = getPaths(sourceFileName, selectSourceList);
        populateComboBox(selectSourceList, jComboBoxSource, selectedIndex);

        selectedIndex = getPaths(moveToFileName, moveToList);
        populateComboBox(moveToList, jComboBoxMoveToDestination, selectedIndex);

        selectedIndex = getPaths(deleteToFileName, deleteToList);
        populateComboBox(deleteToList, jComboBoxDeleteToDestination, selectedIndex);
        
        getSettings();
        
        getSourceFiles();
        
        ArrayList<Integer> rightActionList = new ArrayList<>();
        rightActionList.add(KeyEvent.VK_PERIOD);
        rightActionList.add(KeyEvent.VK_RIGHT);
        
        ArrayList<Integer> leftActionList = new ArrayList<>();
        leftActionList.add(KeyEvent.VK_COMMA);
        leftActionList.add(KeyEvent.VK_LEFT);

        ArrayList<Integer> moveActionList = new ArrayList<>();
        moveActionList.add(KeyEvent.VK_M);

        ArrayList<Integer> deleteActionList = new ArrayList<>();
        deleteActionList.add(KeyEvent.VK_BACK_SPACE);
        deleteActionList.add(KeyEvent.VK_DELETE);

        ArrayList<Integer> undoActionList = new ArrayList<>();
        undoActionList.add(KeyEvent.VK_Z);

        ArrayList<Integer> renameFileActionList = new ArrayList<>();
        renameFileActionList.add(KeyEvent.VK_N);

        JPanel content = ((JPanel) this.getContentPane());
        
        //Determines correct key (Ctrl for Windows, Cmd for Mac)
        int ctrlOrMeta = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
        
        jMenuItemUndo.setAccelerator(getKeyStroke(KeyEvent.VK_Z, ctrlOrMeta));
        jMenuItemRenameFile.setAccelerator(getKeyStroke(KeyEvent.VK_N, ctrlOrMeta));
        
        
        InputMap inputMap = content.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        //InputMap inputMapWhenAncestor = content.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        
        for (int i = 0; i < rightActionList.size(); i++) {
            inputMap.put(KeyStroke.getKeyStroke(rightActionList.get(i), 0), "nextImage" + i);
            content.getActionMap().put("nextImage" + i, RightAction);
        }
        
        for (int i = 0; i < leftActionList.size(); i++) {
            inputMap.put(KeyStroke.getKeyStroke(leftActionList.get(i), 0), "previousImage" + i);
            content.getActionMap().put("previousImage" + i, LeftAction);
        }
        
        for (int i = 0; i < moveActionList.size(); i++) {
            inputMap.put(KeyStroke.getKeyStroke(moveActionList.get(i), ctrlOrMeta), "moveImageCmd" + i);
            content.getActionMap().put("moveImageCmd" + i, MoveAction);
//            inputMap.put(KeyStroke.getKeyStroke(moveActionList.get(i), InputEvent.META_DOWN_MASK), "moveImageCmd" + i);
//            content.getActionMap().put("moveImageCmd" + i, MoveAction);
        }
        
        for (int i = 0; i < deleteActionList.size(); i++) {
            inputMap.put(KeyStroke.getKeyStroke(deleteActionList.get(i), 0), "deleteImage" + i);
            content.getActionMap().put("deleteImage" + i, DeleteAction);
        }
        
        for (int i = 0; i < undoActionList.size(); i++) {
            inputMap.put(KeyStroke.getKeyStroke(undoActionList.get(i), InputEvent.META_DOWN_MASK), "undoDelete" + i);
            content.getActionMap().put("undoDelete" + i, UndoDeleteAction);
        }
        
        for (int i = 0; i < renameFileActionList.size(); i++) {
            inputMap.put(KeyStroke.getKeyStroke(renameFileActionList.get(i), InputEvent.META_DOWN_MASK), "renameFile" + i);
            content.getActionMap().put("renameFile" + i, RenameFileAction);
        }
        
        inputMap = jTextFieldFilename.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ArrayList<Integer> allActionsList = new ArrayList<>();
        allActionsList.addAll(rightActionList);
        allActionsList.addAll(leftActionList);
        allActionsList.addAll(deleteActionList);
        allActionsList.addAll(undoActionList);
        allActionsList.addAll(renameFileActionList);
        
//        for (int i = 0; i < allActionsList.size(); i++) {
//            inputMap.put(KeyStroke.getKeyStroke(allActionsList.get(i), 0), "doNothing" + i);
//            jTextFieldFilename.getActionMap().put("doNothing" + i, NothingAction);
//        }
        
        
        jSliderBrowsePictures.addChangeListener(sliderChange);
        
    }
    
    Action RightAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            jLabelNextMouseClicked(null);
        }
    };

    Action LeftAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            jLabelPreviousMouseClicked(null);
        }
    };

    Action NothingAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            //Do Nothing
        }
    };
    
    Action MoveAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            jButtonMoveActionPerformed(e);
        }
    };

    Action DeleteAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            jButtonDeleteActionPerformed(e);
        }
    };

    Action UndoDeleteAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            jMenuItemUndoActionPerformed(e);
        }
    };
    
    Action RenameFileAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            selectFileNameField();
        }
    };
    
    private void toggleActions(boolean enable) {
        RightAction.setEnabled(enable);
        LeftAction.setEnabled(enable);
        NothingAction.setEnabled(enable);
        MoveAction.setEnabled(enable);
        DeleteAction.setEnabled(enable);
        UndoDeleteAction.setEnabled(enable);
        RenameFileAction.setEnabled(enable);
    }
    
    ChangeListener sliderChange = new ChangeListener() {
        @Override
        public void stateChanged(ChangeEvent e) {
            fileIndex = jSliderBrowsePictures.getValue() - 1;
            setImage();
        }
    };

    @Override
    public void dispose() {
        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exiting Image Sorter", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    @Override
    protected void processKeyEvent(KeyEvent e) {
        System.out.println("Key Event:" + e.paramString() + "; key code:" + e.getKeyCode());
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            jLabelNextMouseClicked(null);
        }
        super.processKeyEvent(e); //To change body of generated methods, choose Tools | Templates.
    }

    private void selectSource() {
        selectDir(jComboBoxSource, selectSourceList);
        savePaths(selectSourceList, sourceFileName, null);
        getSourceFiles();
    }
    
    private void getSourceFiles() {
        if (jComboBoxSource.getSelectedItem() == null) return;
        //Now get the files...
        FilenameFilter filter = new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                String ext = FileUtilities.getExtension(new File(name));
                if (ext == null) return false;
                return (imageExtensions + videoExtensions).contains(ext);
            }
        };
                
        filesList = FileUtilities.getDirFiles(Paths.get((String) jComboBoxSource.getSelectedItem()), false, filter);
        if (filesList.size() > 0) {
            fileIndex = 0;
            setImage();
            resetSlider(1);
        } else {
            setNoImage();
        }
    }
    
    private void resetSlider(int value) {
        jSliderBrowsePictures.setMaximum(filesList.size());
        jSliderBrowsePictures.setMinimum(1);
        jSliderBrowsePictures.setValue(value);
    }
    
    private void getNextImage() {
        fileIndex ++;
        if (fileIndex < 0) fileIndex = 1;
        if (fileIndex > filesList.size() - 1) return;
        setImage();
    }
    
    private void getPreviousImage() {
        fileIndex --;
        if (fileIndex > filesList.size() - 1) fileIndex = filesList.size() - 2;
        if (fileIndex < 0) return;
        setImage();
    }
    
    private void setImage() {
        jLabelXofY.setText((fileIndex + 1) + " of " + filesList.size());
        if (fileIndex < 0) {
            setNoImage();
            return;
        }
        Path imageFile = filesList.get(fileIndex);
        currentImageFilePath = imageFile;
        if (isImage(imageFile)) {
            ImageIcon imageIcon = new ImageIcon(imageFile.toString());
            imageLabel.setImage(imageIcon.getImage());
            imageLabel.setToolTipText("Open image in image viewer");
        } else {
            ImageIcon imageIcon = new ImageIcon("./src/images/playVideo2.jpg");
            imageLabel.setImage(imageIcon.getImage());
            imageLabel.setToolTipText("Open/play video in player");
        }
        jTextFieldFilename.setText(FileUtilities.getPrefix(imageFile.getFileName().toFile()));
        jLabelFilenameExtension.setText("." + FileUtilities.getExtension(imageFile.getFileName().toFile()));
        
        long lastModified = imageFile.toFile().lastModified();
        LocalDateTime fileDateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(lastModified), ZoneId.systemDefault());
        String year = String.valueOf(fileDateTime.getYear());
        String month = fileDateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.getDefault());
        jLabelYear.setText(year);
        jLabelMonth.setText(month);
        resetSlider(fileIndex + 1);
        updateDestinationLabel();
    }
    
    private boolean isImage(Path imageFile) {
        Path pathFile = imageFile.getFileName();
        String ext = pathFile.toString().substring(pathFile.toString().lastIndexOf(".") + 1);
        return imageExtensions.contains(ext);
    }
    
    private void setNoImage() {
        jLabelXofY.setText("No images in this directory");
        imageLabel.setImage(null);
        jTextFieldFilename.setText(null);
        jLabelFilenameExtension.setText(null);
        jLabelYear.setText(null);
        jLabelMonth.setText(null);
        jLabelDestination.setText(null);
        String dirToDelete = (String) jComboBoxSource.getSelectedItem();
        Path deletePath = Paths.get(dirToDelete);
        String[] fileList = deletePath.toFile().list();
        if (fileList == null) {
            JOptionPane.showMessageDialog(this, "Cannot find\n\n\t" + dirToDelete, "Directory Not Found", JOptionPane.ERROR_MESSAGE);
        } else {
            boolean isEmpty = fileList.length < 1;
            if (isEmpty) {
                int response = JOptionPane.showConfirmDialog(this, "The directory \n\n\t" + dirToDelete + "\n\nis empty.  Do you want to delete it?", "Empty Directory",
                                                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (response == JOptionPane.YES_OPTION) {
                    boolean deleteSuccessful = FileUtilities.deleteDirectory(Paths.get(dirToDelete).toFile());
                    if (deleteSuccessful) {
                        //Remove it from the remembered list of dirs
                        for (Iterator<Path> iterator = selectSourceList.iterator(); iterator.hasNext();) {
                            String pathStr = iterator.next().toString();
                            if (pathStr.equals(dirToDelete)) {
                                iterator.remove();
                            }
                        }
                        //Need to save and rebuild
                        if (jComboBoxSource.getSelectedIndex() > -1) {
                            jComboBoxSource.remove(jComboBoxSource.getSelectedIndex());
                        }            
                        savePaths(selectSourceList, sourceFileName, jComboBoxSource);
                        int selectedIndex = getPaths(sourceFileName, selectSourceList);
                        populateComboBox(selectSourceList, jComboBoxSource, selectedIndex);
                        getSourceFiles();
                    } else {
                        JOptionPane.showMessageDialog(this, "Unable to delete the directory.  Not sure why, though.", "Directory Could Not Be Deleted", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "The directory\n\n\t" + dirToDelete + "\n\nis not empty, but there are no images.", "No Images Found", JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    private void selectMoveTo() {
        selectDir(jComboBoxMoveToDestination, moveToList);
        savePaths(moveToList, moveToFileName, jComboBoxMoveToDestination);
    }
    
    private void selectDeleteTo() {
        selectDir(jComboBoxDeleteToDestination, deleteToList);
        savePaths(deleteToList, deleteToFileName, jComboBoxDeleteToDestination);
    }
    
    private void selectFileNameField() {
        jTextFieldFilename.requestFocus();
        jTextFieldFilename.selectAll();
    }

    private void selectDir(JComboBox<String> comboBox, List<Path> comboList) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String selectedSource = (String) comboBox.getSelectedItem();
        Path currPath = null;
        if (selectedSource != null) {
            currPath = Paths.get(selectedSource);
        }
        if (currPath != null) {
            chooser.setCurrentDirectory(currPath.toFile());
        }
        int returnValue = chooser.showDialog(this, "Select Dir");
        switch(returnValue) {
            case JFileChooser.CANCEL_OPTION:
                return;
            case JFileChooser.ERROR_OPTION:
                JOptionPane.showMessageDialog(this, "There was an error", "Error Selecting Directory", JOptionPane.OK_OPTION);
                return;
            case JFileChooser.APPROVE_OPTION:
                break;
        }
        File dirItem = chooser.getSelectedFile();
        Path newPath = dirItem.toPath();
        
        if (newPath != null) {
            //Add it to the list and refresh the combo box
            comboList.add(0, newPath);
            populateComboBox(comboList, comboBox, 0);
        }
    }
    
    private int getPaths(String fileName, List<Path> pathsList) {
        int selectedIndex = -10;
        try {
            ArrayList<String> directoriesList = FileUtilities.readLinesFromFile(Paths.get(homeDir, fileName));
            pathsList.clear();
            List<String> prefsList = new ArrayList<>();
            for (String pref : directoriesList) {
                if (prefsList.contains(pref)) continue;
                if (selectedIndex == -10) {
                    try {
                        selectedIndex = Integer.parseInt(pref);
                        continue;
                    } catch (Exception ex1) {
                        //First line wasn't the index
                    }
                }
                pathsList.add(Paths.get(pref));
                prefsList.add(pref);
            }
        } catch (Exception ex2) {
            ex2.printStackTrace();
        }
        return selectedIndex;
    }
    
    private void populateComboBox(List<Path> pathList, JComboBox<String> comboBox, int selectedIndex) {        
        comboBox.removeAllItems();
        if (pathList.size() > 10) {
            pathList = pathList.subList(0, 9);
        }
        for (Path path : pathList) {
            comboBox.addItem(path.toString());
        }
        if (selectedIndex > -1 && selectedIndex < comboBox.getModel().getSize()) {
            comboBox.setSelectedIndex(selectedIndex);
        }
    }
    
    private void updateDestinationLabel() {
        Path destinationPath = getDestination((String) jComboBoxMoveToDestination.getSelectedItem(), FileMoveType.MOVE);
        if (destinationPath != null) {
            if (destinationPath.toFile().exists()) {
                jLabelDestination.setForeground(Color.red);
                jLabelDestination.setToolTipText("A file with the same name already exists at the destination");
            } else {
                jLabelDestination.setForeground(defaultFG_Color);
                jLabelDestination.setToolTipText("Full path and name of the destination");
            }
            jLabelDestination.setText(destinationPath.toString());
        }
    }
    
    private Path getDestination(String destination, FileMoveType moveType) {
        if ((fileIndex + 1 > filesList.size())
                || destination == null) return null;
        Path sourceFile = filesList.get(fileIndex);
        Path moveToPathAndFile = Paths.get(destination);
        if (jCheckBoxAutoCreateDirs.isSelected()
                && moveType != null
                && moveType == FileMoveType.MOVE) {
            long lastModified = sourceFile.toFile().lastModified();
            LocalDateTime fileDateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(lastModified), ZoneId.systemDefault());
            String year = String.valueOf(fileDateTime.getYear());
            String month = String.valueOf(fileDateTime.getMonthValue());
            if (month.length() < 2) {
                month = "0" + month;
            }
            if (jTextFieldDirName.getText() != null && !jTextFieldDirName.getText().trim().isEmpty()) {
                month = month + "_" + jTextFieldDirName.getText().trim();
            }
            moveToPathAndFile = Paths.get(destination, year, month);
        } else if (moveType != null && moveType == FileMoveType.MOVE) {
            //check for a custom dir name
            if (jTextFieldDirName.getText() != null && !jTextFieldDirName.getText().trim().isEmpty()) {
                moveToPathAndFile = Paths.get(destination, jTextFieldDirName.getText().trim());
            }
        }
        String fileExtension = jLabelFilenameExtension.getText();
        String fileName = jTextFieldFilename.getText();
        fileName = fileName + fileExtension;
        moveToPathAndFile = moveToPathAndFile.resolve(fileName);
        return moveToPathAndFile;
        //jLabelDestination.setText(moveToPathAndFile.toString());
    }
    
    private void savePaths(List<Path> pathList, String fileName, JComboBox<String> comboBox) {
        if (comboBox == null || comboBox.getModel() == null) return;
        StringBuffer stringToWrite = new StringBuffer("");
        int selectedIndex = 0;
        if (comboBox.getModel().getSize() > 0) {
            selectedIndex = comboBox.getSelectedIndex();
        }
        stringToWrite.append(String.valueOf(selectedIndex)).append("\n");
        for (Path source : pathList) {
            stringToWrite.append(source.toString()).append("\n");
        }        
        Path fileDest = Paths.get(homeDir, fileName);
        try {
            FileUtilities.writeStringToFile(fileDest, stringToWrite, false);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problem saving paths:  " + ex.getMessage(), 
                    "Issue Saving Paths", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    private void getSettings() {
        try {
            ArrayList<String> settingsList = FileUtilities.readLinesFromFile(Paths.get(homeDir, toolSettingsFileName));
            String temp;
            for (String pref : settingsList) {
                String[] setting = pref.split(",");
                if (setting.length < 2) continue;
                temp = setting[1];
                if (null != setting[0]) switch (setting[0]) {
                    case CREATE_DATE_DIR:
                        jCheckBoxAutoCreateDirs.setSelected(Boolean.valueOf((String) temp));
                        break;
                    case SUB_DIR_TEXT:
                        jTextFieldDirName.setText(setting[1]);
                        break;
                    case HIDE_TOP_PART:
                        jSplitPane1.setDividerLocation(Integer.parseInt(setting[1]));
                        break;
                    default:
                        break;
                }
            }
        } catch (Exception ex) {
            
        }
    }
    
    private void saveSettings() {
        StringBuffer stringToWrite = new StringBuffer("");
        stringToWrite.append(CREATE_DATE_DIR).append(",").append(jCheckBoxAutoCreateDirs.isSelected()).append("\n");
        stringToWrite.append(SUB_DIR_TEXT).append(",").append(jTextFieldDirName.getText()).append("\n");
        stringToWrite.append(HIDE_TOP_PART).append(",").append(jSplitPane1.getDividerLocation()).append("\n");
        Path fileDest = Paths.get(homeDir, toolSettingsFileName);
        try {
            FileUtilities.writeStringToFile(fileDest, stringToWrite, false);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problem saving settings:  " + ex.getMessage(), 
                    "Issue Saving Settings", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    /*-----------------------------------------*/
    
    private void moveImage(Path destination, FileMoveType moveType) {
        if (destination == null) return;
        //Get the file source
        Path sourceFile = filesList.get(fileIndex);
        try {
            if (destination.toFile().exists()) {
                Image bi = ImageIO.read(destination.toFile());
                ImageIcon icon = new ImageIcon(bi.getScaledInstance(200, 200, Image.SCALE_SMOOTH));
                
                //Check to see if they want ot overwrite it anyway...
                int response = JOptionPane.showConfirmDialog(this, "A file with the same name already exists."
                        + NEW_LINE + "Are you sure"
                        + " you want to overwrite the destination file??"
                        + NEW_LINE + "Overwriting cannot be undone...",
                        "File Already Exists", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, icon);
                if (response != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            boolean success = FileUtilities.copyFile(sourceFile, destination);
            if (!success) throw new Exception("Are you sure the destination and source are different?");
            Files.delete(sourceFile);
            int originalIndex = fileIndex;
            getSourceFiles();
            fileIndex = originalIndex;
            if (originalIndex > filesList.size() - 1) {
                fileIndex = filesList.size() - 1;
            }
            fileActionsList.add(0, new FileAction(sourceFile, destination, moveType));
            setImage();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Problem " + moveType.actionDescription.toLowerCase() + " file:  " + ex.getMessage(), 
                    "Issue " + moveType.actionDescription.toLowerCase() + " File", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void undoLastAction() {
        if (fileActionsList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No action to undo", 
                    "No Undos Available", JOptionPane.WARNING_MESSAGE);
            return;
        }
        FileAction lastAction = fileActionsList.remove(0);
        try {
            boolean success = FileUtilities.copyFile(lastAction.getTo(), lastAction.getFrom());
            if (!success) throw new Exception("Are you sure the destination and source are different?");
            Files.delete(lastAction.getTo());
            int originalIndex = fileIndex;
            getSourceFiles();
            fileIndex = originalIndex;
            //Figure out which index was undeleted
            for (int i = 0; i < filesList.size(); i++) {
                if (lastAction.getFrom().compareTo(filesList.get(i)) == 0) {
                    fileIndex = i;
                    break;
                }
            }
            if (originalIndex > filesList.size() - 1) {
                fileIndex = filesList.size() - 1;
            }
            setImage();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Problem undoing last action for file '"
                    + lastAction.getTo().getFileName() + "':  " + ex.getMessage(), 
                    "Issue Undoing Action", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    private ArrayList<FileAction> fileActionsList = new ArrayList<>();
    
    class FileAction {
        Path from;
        Path to;
        FileMoveType movementType;
        int indexLocation; //Where to put the picture back into the list??

        public FileAction(Path from, Path to, FileMoveType movementType) {
            this.from = from;
            this.to = to;
            this.movementType = movementType;
        }

        public Path getFrom() {
            return from;
        }

        public Path getTo() {
            return to;
        }

        public FileMoveType getMovementType() {
            return movementType;
        }
        
    }

}
